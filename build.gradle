import io.gitlab.arturbosch.detekt.Detekt
import io.gitlab.arturbosch.detekt.DetektCreateBaselineTask
import plugins.module.ModuleGenerationPlugin


buildscript {
    apply from: 'dependencies.gradle'
    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
    }

    dependencies {
        classpath gradlePlugins.android
        classpath gradlePlugins.kotlin
        classpath gradlePlugins.detekt
    }
}

apply plugin: 'io.gitlab.arturbosch.detekt'
apply plugin: ModuleGenerationPlugin
apply from: "$project.rootDir/gradle/configure-android.gradle"
apply from: "$project.rootDir/gradle/configure-kotlin.gradle"

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

dependencies {
    detektPlugins "io.gitlab.arturbosch.detekt:detekt-formatting:$versions.detekt"
}

def detektConfigFilePath = "$rootDir/detekt-config.yml"
def detektBaselineFilePath = "$rootDir/detekt-baseline.yml"

task detektProjectBaseline(type: DetektCreateBaselineTask) {
    description = "Overrides current baseline."
    ignoreFailures.set(true)
    parallel.set(true)
    buildUponDefaultConfig.set(true)
    setSource(files(rootDir))
    config.setFrom(files(detektConfigFilePath))
    baseline.set(file(detektBaselineFilePath))
    include("**/*.kt")
    include("**/*.kts")
    exclude("**/resources/**")
    exclude("**/build/**")
}

subprojects {
    detekt {
        baseline = file(detektBaselineFilePath)
    }
}

detekt {
    basePath = projectDir
    config = files(detektConfigFilePath)
    source = files(projectDir)
    parallel = true
    reports {
        xml.enabled = true
        html.enabled = true
        txt.enabled = false
    }
}

tasks.withType(Detekt).all {
    include '**/*.kt'
    include '**/*.kts'
    exclude "**/resources/**"
    exclude "**/build/**"
}

task staticAnalysis(type: GradleBuild) {
    tasks = ['detekt']
}
